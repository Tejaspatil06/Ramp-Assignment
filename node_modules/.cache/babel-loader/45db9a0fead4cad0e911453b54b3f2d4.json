{"ast":null,"code":"var _jsxFileName = \"/Users/tejaspatil/Downloads/ramp-fe-challenge-2/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false); // Keep track of all loaded transactions\n\n  const [allTransactions, setAllTransactions] = useState([]); // Combine current and previous transactions when using pagination\n\n  const transactions = useMemo(() => {\n    if (transactionsByEmployee) {\n      return transactionsByEmployee;\n    }\n\n    if (paginatedTransactions !== null && paginatedTransactions !== void 0 && paginatedTransactions.data) {\n      if (paginatedTransactions.nextPage) {\n        // Store the combined transactions\n        const newTransactions = [...allTransactions, ...paginatedTransactions.data];\n        setAllTransactions(newTransactions);\n        return newTransactions;\n      }\n\n      return paginatedTransactions.data;\n    }\n\n    return null;\n  }, [paginatedTransactions, transactionsByEmployee, allTransactions]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n\n    if (!employees) {\n      await employeeUtils.fetchAll();\n    }\n\n    await paginatedTransactionsUtils.fetchAll();\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils, employees]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    setAllTransactions([]); // Clear the accumulated transactions when filtering\n\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null) {\n            return;\n          }\n\n          await loadTransactionsByEmployee(newValue.id);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            await paginatedTransactionsUtils.fetchAll();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Pt4IgvPyp/Y9mQ1ItXpuNPGmdRg=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","allTransactions","setAllTransactions","transactions","nextPage","newTransactions","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","employeeId","fetchById","loading","item","value","id","label","firstName","lastName","newValue"],"sources":["/Users/tejaspatil/Downloads/ramp-fe-challenge-2/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee, Transaction } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n\n  // Keep track of all loaded transactions\n  const [allTransactions, setAllTransactions] = useState<Transaction[]>([])\n\n  // Combine current and previous transactions when using pagination\n  const transactions = useMemo(() => {\n    if (transactionsByEmployee) {\n      return transactionsByEmployee\n    }\n\n    if (paginatedTransactions?.data) {\n      if (paginatedTransactions.nextPage) {\n        // Store the combined transactions\n        const newTransactions = [...allTransactions, ...paginatedTransactions.data]\n        setAllTransactions(newTransactions)\n        return newTransactions\n      }\n      return paginatedTransactions.data\n    }\n\n    return null\n  }, [paginatedTransactions, transactionsByEmployee, allTransactions])\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    transactionsByEmployeeUtils.invalidateData()\n    \n    if (!employees) {\n      await employeeUtils.fetchAll()\n    }\n    \n    await paginatedTransactionsUtils.fetchAll()\n    setIsLoading(false)\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils, employees])\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData()\n      setAllTransactions([]) // Clear the accumulated transactions when filtering\n      await transactionsByEmployeeUtils.fetchById(employeeId)\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  )\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n        <hr className=\"RampBreak--l\" />\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null) {\n              return\n            }\n            await loadTransactionsByEmployee(newValue.id)\n          }}\n        />\n        <div className=\"RampBreak--l\" />\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n          {paginatedTransactions?.nextPage && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={async () => {\n                await paginatedTransactionsUtils.fetchAll()\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}